// PEG grammar for parsing user script metadata
// http://pegjs.majda.cz/online

/*
Test value:

// ==UserScript==
// @author            Author
// @copyright         Copyright
// @description       Test value including all metas
// @description:cs    Test value including all metas (cs)
// @description:en-US Test value including all metas (en-US)
// @downloadURL       http://example.org/foo-download.user.js
// @exclude           http://example.com/foo1
// @exclude           http://example.com/foo2
// @grant             GM_getValue
// @grant             GM_setValue
// @homepageURL       http://example.org/home/
// @icon              https://assets-cdn.github.com/favicon.ico
// @include           http://example.com/1*
// @include           http://example.com/2*
// @installURL        http://example.org/foo-install.user.js
// @match             http://example.net/1*
// @match             http://example.net/2*
// @name              Metadata Test
// @name:cs           Metadata Test (cs)
// @name:en-US        Metadata Test (en-US)
// @namespace         test
// @noframes
// @require           https://gist.githubusercontent.com/arantius/1287211/raw/a.user.js
// @resource          ico1 https://assets-cdn.github.com/favicon.ico
// @resource          ico2 https://assets-cdn.github.com/favicon.ico
// @run-at            document-start
// @updateURL         http://example.org/foo.meta.js
// @version           1.2.3
// ==/UserScript==
*/

/*
// Uncomment to parse an entire metadata block.
// I.E for testing/development.
meta =
  "// ==UserScript==\n"
  lines:line*
  "// ==/UserScript==" ("\n"?)
  { return lines; }
*/

line =
    "// @"
    meta:(
        keyword0 /
        keyword1 /
        keyword2 /
        keywordLocale)
    "\n"?
    { return meta; }

whitespace = [ \t\n]+
non_whitespace = $[^ \t\n]+
non_newline = $[^\n]+

keyword0 =
    keyword:(
        "noframes"
        )
    { return {keyword:keyword}; }

keyword1 =
    keyword:(
        "author" /
        "copyright" /
        "downloadURL" /
        "exclude" /
        "grant" /
        "homepageURL" /
        "icon" /
        "include" /
        "installURL" /
        "match" /
        "namespace" /
        "require" /
        "run-at" /
        "updateURL" /
        "version"
        )
    whitespace
    value:non_newline
    { return {keyword:keyword, value:value}; }

keyword2 =
    keyword:("resource")
    whitespace
    value1:non_whitespace
    whitespace
    value2:non_newline
    { return {keyword:keyword, value1:value1, value2:value2}; }

keywordLocale
  = keyword:(
        "description" /
        "name"
        )
    locale:(":" localeValue:$[a-zA-Z-]+ { return localeValue })?
    whitespace
    value:non_newline
    { return {keyword:keyword, locale:locale, value:value}; }

